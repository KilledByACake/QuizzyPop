@model QuizzyPop.ViewModels.QuizMetaDataViewModel

@{
    ViewData["Title"] = "Quiz Published - " + Model.Title;
}

<section class=" qp-page published-quiz-page">
    <div class="published-container">
        
        <!-- Success Header -->
        <div class="publish-success-header">
            <div class="success-icon">
                <img src="~/images/mascot.png" alt="QuizzyPop Mascot" class="success-mascot" />
                <div class="success-badge">‚úì</div>
            </div>
            <h1>üéâ Quiz Published Successfully! üéâ</h1>
            <p>Your quiz is now live and ready for participants to take!</p>
        </div>

        <!-- Quiz Preview Card -->
        <div class="quiz-preview-card">
            <div class="quiz-preview-header">
                <h2>@Model.Title</h2>
                <div class="quiz-status">
                    <span class="status-badge live">LIVE</span>
                </div>
            </div>
            
            <div class="quiz-preview-content">
                <div class="quiz-description">
                    <p>@Model.Description</p>
                </div>
                
                <div class="quiz-details-grid">
                    <div class="detail-item">
                        <div class="detail-icon">üìö</div>
                        <div class="detail-content">
                            <span class="detail-label">Category</span>
                            <span class="detail-value">@Model.Category</span>
                        </div>
                    </div>
                    
                    <div class="detail-item">
                        <div class="detail-icon">üìä</div>
                        <div class="detail-content">
                            <span class="detail-label">Difficulty</span>
                            <span class="detail-value">@Model.Difficulty</span>
                        </div>
                    </div>
                    
                    <div class="detail-item">
                        <div class="detail-icon">‚ùì</div>
                        <div class="detail-content">
                            <span class="detail-label">Questions</span>
                            <span class="detail-value">@Model.Questions.Count questions</span>
                        </div>
                    </div>
                    
                    <div class="detail-item">
                        <div class="detail-icon">‚è±Ô∏è</div>
                        <div class="detail-content">
                            <span class="detail-label">Time Limit</span>
                            <span class="detail-value">@(Model.TimeLimit > 0 ? Model.TimeLimit + " minutes" : "No limit")</span>
                        </div>
                    </div>
                </div>

                @if (!string.IsNullOrEmpty(Model.Tags))
                {
                    <div class="quiz-tags">
                        @foreach (var tag in Model.Tags.Split(','))
                        {
                            <span class="tag">@tag.Trim()</span>
                        }
                    </div>
                }
            </div>
        </div>

        <!-- Questions Preview -->
        <div class="questions-preview-card">
            <h3>üìù Questions Preview</h3>
            <div class="questions-list">
                @for (int i = 0; i < Math.Min(3, Model.Questions.Count); i++)
                {
                    <div class="question-preview-item">
                        <div class="question-number">@(i + 1)</div>
                        <div class="question-text">@Model.Questions[i].Text</div>
                        <div class="question-options-count">@Model.Questions[i].Options.Count options</div>
                    </div>
                }
                
                @if (Model.Questions.Count > 3)
                {
                    <div class="question-preview-item more-questions">
                        <div class="question-number">...</div>
                        <div class="question-text">And @(Model.Questions.Count - 3) more questions</div>
                        <div class="question-options-count">Total: @Model.Questions.Count questions</div>
                    </div>
                }
            </div>
        </div>

        <!-- Share Your Quiz -->
        <div class="share-quiz-card">
            <h3>üîó Share Your Quiz</h3>
            <p>Copy this link to share your quiz with participants:</p>
            <div class="share-link-container">
                <input type="text" readonly value="@Url.Action("TakeQuiz", "Home", new { id = ViewBag.QuizId ?? "123" }, Context.Request.Scheme)" class="share-link-input" id="quizLink" />
                <button type="button" class="btn-copy" onclick="copyQuizLink()">üìã Copy</button>
            </div>
        </div>

        <!-- Action Buttons -->
        <div class="published-actions">
            <a href="@Url.Action("Index", "Home")" class="btn btn-secondary">üè† Back to Home</a>
            <a href="@Url.Action("CreateQuiz", "Home")" class="btn btn-primary">‚ûï Create Another Quiz</a>
            <a href="#" class="btn btn-edit">‚úèÔ∏è Edit This Quiz</a>
        </div>

    </div>
</section>

<style>
.published-quiz-page {
    min-height: 100vh;
    padding: 2rem 1rem;
    font-family: 'Baloo 2', cursive, sans-serif;
}

.published-container {
    max-width: 800px;
    margin: 0 auto;
    display: flex;
    flex-direction: column;
    gap: 2rem;
}

/* Success Header */
.publish-success-header {
    text-align: center;
    padding: 2rem 0;
}

.success-icon {
    position: relative;
    display: inline-block;
    margin-bottom: 1.5rem;
}

.success-mascot {
    width: 120px;
    height: auto;
    filter: drop-shadow(0 8px 0 rgba(0,0,0,.1));
}

.success-badge {
    position: absolute;
    top: -5px;
    right: -5px;
    width: 40px;
    height: 40px;
    background: #0F766E;
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 24px;
    font-weight: bold;
    box-shadow: 0 4px 8px rgba(0,0,0,.2);
}

.publish-success-header h1 {
    font-family: 'Baby', Arial, sans-serif;
    font-size: 2.5rem;
    color: #0F766E;
    margin: 0 0 0.5rem 0;
}

.publish-success-header p {
    font-size: 1.2rem;
    color: #666;
    margin: 0;
}

/* Quiz Preview Card */
.quiz-preview-card {
    background: #fff;
    border-radius: 16px;
    box-shadow: 0 8px 24px rgba(0,0,0,.08);
    padding: 2rem;
    border: 3px solid #0F766E;
}

.quiz-preview-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    flex-wrap: wrap;
    gap: 1rem;
}

.quiz-preview-header h2 {
    font-family: 'Baby', Arial, sans-serif;
    font-size: 2rem;
    color: #0a5b8f;
    margin: 0;
}

.status-badge {
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-weight: 700;
    font-size: 0.9rem;
    text-transform: uppercase;
    letter-spacing: 1px;
}

.status-badge.live {
    background: #4CAF50;
    color: white;
}

.quiz-description p {
    font-size: 1.1rem;
    color: #555;
    margin-bottom: 1.5rem;
    line-height: 1.6;
}

.quiz-details-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
}

.detail-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 1rem;
    background: #f8fcff;
    border-radius: 12px;
    border: 2px solid #e0f2fe;
}

.detail-icon {
    font-size: 1.5rem;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #0F766E;
    border-radius: 10px;
    filter: grayscale(100%) brightness(0) invert(1);
}

.detail-content {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
}

.detail-label {
    font-weight: 700;
    color: #0F766E;
    font-size: 0.85rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.detail-value {
    font-size: 1rem;
    color: #333;
    font-weight: 600;
}

.quiz-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-top: 1rem;
}

.tag {
    display: inline-block;
    background: #0F766E;
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    font-size: 0.9rem;
    font-weight: 600;
}

/* Questions Preview */
.questions-preview-card {
    background: #fff;
    border-radius: 16px;
    box-shadow: 0 8px 24px rgba(0,0,0,.08);
    padding: 2rem;
}

.questions-preview-card h3 {
    font-family: 'Baby', Arial, sans-serif;
    color: #0F766E;
    margin: 0 0 1.5rem 0;
    font-size: 1.5rem;
}

.questions-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.question-preview-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    background: #f8fcff;
    border-radius: 12px;
    border-left: 4px solid #0F766E;
}

.question-preview-item.more-questions {
    background: #f0f0f0;
    border-left-color: #ccc;
    opacity: 0.8;
}

.question-number {
    width: 40px;
    height: 40px;
    background: #0F766E;
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 700;
    flex-shrink: 0;
}

.question-text {
    flex: 1;
    font-weight: 600;
    color: #333;
}

.question-options-count {
    font-size: 0.9rem;
    color: #666;
    font-style: italic;
}

/* Share Quiz Card */
.share-quiz-card {
    background: #f8fcff;
    border: 2px solid #0F766E;
    border-radius: 16px;
    padding: 2rem;
    text-align: center;
}

.share-quiz-card h3 {
    font-family: 'Baby', Arial, sans-serif;
    color: #0F766E;
    margin: 0 0 1rem 0;
    font-size: 1.5rem;
}

.share-quiz-card p {
    color: #666;
    margin-bottom: 1.5rem;
}

.share-link-container {
    display: flex;
    gap: 0.75rem;
    max-width: 500px;
    margin: 0 auto;
}

.share-link-input {
    flex: 1;
    padding: 0.75rem;
    border: 2px solid #0F766E;
    border-radius: 8px;
    font-family: monospace;
    font-size: 0.9rem;
    background: white;
}

.btn-copy {
    background: #4CAF50;
    color: white;
    padding: 0.75rem 1rem;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-family: 'Baloo 2', cursive, sans-serif;
    font-weight: 700;
    transition: background 0.2s ease;
}

.btn-copy:hover {
    background: #45a049;
}

/* Action Buttons */
.published-actions {
    display: flex;
    justify-content: center;
    gap: 1rem;
    flex-wrap: wrap;
    padding: 1rem 0;
}

.btn {
    padding: 0.75rem 1.5rem;
    border-radius: 12px;
    text-decoration: none;
    font-weight: 700;
    font-family: 'Baloo 2', cursive, sans-serif;
    cursor: pointer;
    border: none;
    transition: all 0.2s ease;
    display: inline-block;
    text-align: center;
}

.btn-primary {
    background: #0F766E;
    color: white;
}

.btn-primary:hover {
    background: #0d6157;
    transform: translateY(-1px);
}

.btn-secondary {
    background: white;
    color: #0F766E;
    border: 2px solid #0F766E;
}

.btn-secondary:hover {
    background: #0F766E;
    color: white;
}

.btn-edit {
    background: #2196F3;
    color: white;
}

.btn-edit:hover {
    background: #1976D2;
}

/* Responsive */
@@media (max-width: 768px) {
    .published-container {
        padding: 0 0.5rem;
    }
    
    .quiz-preview-header {
        flex-direction: column;
        align-items: stretch;
    }
    
    .quiz-details-grid {
        grid-template-columns: 1fr;
    }
    
    .share-link-container {
        flex-direction: column;
    }
    
    .published-actions {
        flex-direction: column;
        align-items: stretch;
    }
    
    .question-preview-item {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.5rem;
    }
}
</style>

<script>
function copyQuizLink() {
    const linkInput = document.getElementById('quizLink');
    linkInput.select();
    linkInput.setSelectionRange(0, 99999);
    
    try {
        document.execCommand('copy');
        
        const copyBtn = document.querySelector('.btn-copy');
        const originalText = copyBtn.textContent;
        copyBtn.textContent = '‚úÖ Copied!';
        copyBtn.style.background = '#4CAF50';
        
        setTimeout(() => {
            copyBtn.textContent = originalText;
        }, 2000);
        
    } catch (err) {
        console.error('Failed to copy text: ', err);
    }
}
</script>