@model QuizzyPop.ViewModels.QuizMetaDataViewModel
@{
    ViewData["Title"] = "Create Quiz";
}

<section class="create-quiz-page">

    <div class="title-row">
        <h1>Create new Quiz</h1>
    </div>

    <div class="cq-grid">
        <!-- LEFT: form column -->
        <div class="form-col">
            <form asp-controller="Home" asp-action="Create" method="post" enctype="multipart/form-data" novalidate>
                <!-- Quiz info card -->
                <div class="card">
                    <h2 class="card-title">Quiz information</h2>
                    @await Html.PartialAsync("_QuizMetaData", Model)
                </div>

                <!-- Questions card(s) -->
                <div class="card" style="margin-top:2rem;">
                    <h2>Questions</h2>
                    <div id="questions">
                        @for (int i = 0; i < Model.Questions.Count; i++)
                        {
                            @await Html.PartialAsync("_QuizQuestion", Model.Questions[i], new ViewDataDictionary(ViewData) { { "QuestionNumber", i + 1 } })
                        }
                    </div>
                    <div class="add-question-container" style="margin-top:1.5rem; text-align:center;">
                        <button type="button" id="addQuestionBtn" class="btn btn-outline-primary">
                            + Add question
                        </button>
                    </div>
                </div>

                <!-- Publish button at the bottom -->
                <div class="publish-bottom" style="margin-top:2rem;">
                    <button type="submit" class="btn btn-giant">Publish</button>
                </div>
            </form>
        </div>

        <!-- RIGHT: sidebar -->
        <aside class="sidebar" aria-label="Quiz summary and settings">
            <div class="card small">
                <ul class="stats">
                    <li><span>Total questions</span><strong>@Model.Questions.Count</strong></li>
                    <li><span>Total points</span><strong>1</strong></li>
                    <li><span>Estimated time</span><strong>2 min</strong></li>
                </ul>
            </div>
            <div class="card small" style="margin-top:1rem;">
                <div class="settings">
                    <label class="switch">
                        <input type="checkbox" name="RandomizeQuestionOrder" checked />
                        <span class="slider"></span>
                        <span class="switch-text">Randomize question order</span>
                    </label>

                    <label class="switch">
                        <input type="checkbox" name="AllowBackNavigation" />
                        <span class="slider"></span>
                        <span class="switch-text">Allow back navigation</span>
                    </label>

                    <label class="switch">
                        <input type="checkbox" name="GiveAwards" checked />
                        <span class="slider"></span>
                        <span class="switch-text">Give awards for right answers</span>
                    </label>
                </div>
            </div>
        </aside>
    </div>
</section>

<template id="question-template">
  <div class="card question-card" data-index="__INDEX__">
    <!-- Question template content here -->
  </div>
</template>

@section Scripts {
<script>
document.addEventListener('DOMContentLoaded', function() {
    const addQuestionBtn = document.getElementById('addQuestionBtn');
    const questionsContainer = document.getElementById('questions');
    let questionCount = @Model.Questions.Count;

    // Add Question functionality
    addQuestionBtn.addEventListener('click', function() {
        questionCount++;
        
        const lastQuestion = questionsContainer.querySelector('.question-card:last-child');
        
        if (lastQuestion) {
            const newQuestion = lastQuestion.cloneNode(true);
            
            // Clear all input values in the cloned question
            const inputs = newQuestion.querySelectorAll('input, textarea, select');
            inputs.forEach(input => {
                if (input.type === 'checkbox' || input.type === 'radio') {
                    input.checked = false;
                } else {
                    input.value = '';
                }
            });
            
            // Update the question number in the heading
            const questionHeading = newQuestion.querySelector('h3');
            if (questionHeading) {
                questionHeading.textContent = `Question ${questionCount}`;
            }
            
            // Update all name attributes to have the correct index
            inputs.forEach(input => {
                if (input.name) {
                    input.name = input.name.replace(/\[\d+\]/, `[${questionCount - 1}]`);
                }
            });
            
            // Update any id attributes
            inputs.forEach(input => {
                if (input.id) {
                    input.id = input.id.replace(/_\d+_/, `_${questionCount - 1}_`);
                }
            });
            
            // Update any for attributes in labels
            const labels = newQuestion.querySelectorAll('label[for]');
            labels.forEach(label => {
                if (label.getAttribute('for')) {
                    label.setAttribute('for', 
                        label.getAttribute('for').replace(/_\d+_/, `_${questionCount - 1}_`)
                    );
                }
            });
            
            questionsContainer.appendChild(newQuestion);
            updateQuestionCount();
            updateMoveButtons();
            newQuestion.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
    });
    
    // Handle all button clicks with event delegation
    document.addEventListener('click', function(e) {
        // Remove question functionality
        if (e.target.classList.contains('remove-question-btn')) {
            const questionCard = e.target.closest('.question-card');
            if (questionCard && questionCount > 1) {
                questionCard.remove();
                questionCount--;
                updateQuestionCount();
                renumberQuestions();
                updateMoveButtons();
            }
        }
        
        // Move Up functionality
        if (e.target.classList.contains('move-up-btn')) {
            const questionCard = e.target.closest('.question-card');
            const previousCard = questionCard.previousElementSibling;
            if (previousCard) {
                questionsContainer.insertBefore(questionCard, previousCard);
                renumberQuestions();
                updateMoveButtons();
                questionCard.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }
        }
        
        // Move Down functionality
        if (e.target.classList.contains('move-down-btn')) {
            const questionCard = e.target.closest('.question-card');
            const nextCard = questionCard.nextElementSibling;
            if (nextCard) {
                questionsContainer.insertBefore(nextCard, questionCard);
                renumberQuestions();
                updateMoveButtons();
                questionCard.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }
        }
    });
    
    // Function to update the question count in the sidebar
    function updateQuestionCount() {
        const totalQuestionsElement = document.querySelector('.stats li strong');
        if (totalQuestionsElement) {
            totalQuestionsElement.textContent = questionCount;
        }
    }
    
    // Function to renumber all questions after removal or reordering
    function renumberQuestions() {
        const questionCards = questionsContainer.querySelectorAll('.question-card');
        questionCards.forEach((card, index) => {
            const questionHeading = card.querySelector('h3');
            if (questionHeading) {
                questionHeading.textContent = `Question ${index + 1}`;
            }
            
            // Update data-question-index
            card.setAttribute('data-question-index', index + 1);
            
            // Update name attributes
            const inputs = card.querySelectorAll('input, textarea, select');
            inputs.forEach(input => {
                if (input.name) {
                    input.name = input.name.replace(/\[\d+\]/, `[${index}]`);
                }
                if (input.id) {
                    input.id = input.id.replace(/_\d+_/, `_${index}_`);
                }
            });
            
            // Update label for attributes
            const labels = card.querySelectorAll('label[for]');
            labels.forEach(label => {
                if (label.getAttribute('for')) {
                    label.setAttribute('for', 
                        label.getAttribute('for').replace(/_\d+_/, `_${index}_`)
                    );
                }
            });
        });
    }
    
    // Function to update move button states
    function updateMoveButtons() {
        const questionCards = questionsContainer.querySelectorAll('.question-card');
        
        questionCards.forEach((card, index) => {
            const moveUpBtn = card.querySelector('.move-up-btn');
            const moveDownBtn = card.querySelector('.move-down-btn');
            
            // Disable move up for first question
            if (moveUpBtn) {
                moveUpBtn.disabled = (index === 0);
            }
            
            // Disable move down for last question
            if (moveDownBtn) {
                moveDownBtn.disabled = (index === questionCards.length - 1);
            }
        });
    }
    
    // Initialize move button states
    updateMoveButtons();
});
</script>
}
<style>
.question-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid #e0e0e0;
}

.question-controls {
    display: flex;
    gap: 0.5rem;
}

.move-up-btn, .move-down-btn {
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    font-size: 16px;
    background: #0F766E;  /* Green theme color */
    color: white;
    border: none;
    border-radius: 6px;
    transition: all 0.2s ease;
}

.move-up-btn:hover, .move-down-btn:hover {
    background: #0F766E;
    transform: translateY(-1px);
}

.remove-question-btn {
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    font-size: 16px;
    background: #ff4757;  /* Red for remove */
    color: white;
    border: none;
    border-radius: 6px;
    transition: all 0.2s ease;
}

.remove-question-btn:hover {
    background: #ff3742;
    transform: translateY(-1px);
}

.move-up-btn:disabled, .move-down-btn:disabled {
    background: #cccccc;
    color: #888888;
    cursor: not-allowed;
    transform: none;
}

.move-up-btn:disabled:hover, .move-down-btn:disabled:hover {
    background: #cccccc;
    transform: none;
}

/* Alternative: If you want to match your exact theme colors */
.move-up-btn, .move-down-btn {
    background: #0F766E;  /* Blue theme */
}

.move-up-btn:hover, .move-down-btn:hover {
    background: #0F766E;
}
</style>