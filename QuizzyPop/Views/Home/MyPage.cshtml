@model QuizzyPop.ViewModels.MyPageViewModel


@{
    ViewData["Title"] = "My Page - " + (Model.User.DisplayName ?? Model.User.Name);
}

<div class=" qp-page my-page-container">
    <!-- Big Title -->
    <div class="page-title">
        <h1>My Page</h1>
    </div>

    <!-- User Overview Card -->
    <div class="card user-overview">
        <div class="user-info">
            <img src="~/images/test.jpg" alt="Profile" class="profile-image" />
            <div class="user-details">
                <h2>@(Model.User.DisplayName ?? Model.User.Name)</h2>
                <p class="user-address">üìç @Model.User.Address</p>
                <p class="user-since">Member since @Model.User.CreatedAt.ToString("MMMM yyyy")</p>
            </div>
        </div>
        <div class="user-stats">
            <div class="stat">
                <span class="stat-number">@Model.User.QuizzesCreated</span>
                <span class="stat-label">Created</span>
            </div>
            <div class="stat">
                <span class="stat-number">@Model.User.QuizzesTaken</span>
                <span class="stat-label">Taken</span>
            </div>
            <div class="stat">
                <span class="stat-number">@((Model.User.QuizzesCreated.HasValue && Model.User.QuizzesTaken.HasValue && Model.User.QuizzesTaken.Value > 0 ? (int)((Model.User.QuizzesCreated.Value / (double)Model.User.QuizzesTaken.Value) * 100) : 0))%</span>
                <span class="stat-label">Success</span>
            </div>
        </div>
    </div>

    <!-- Quiz Cards Container -->
    <div class="quiz-cards-container">
        <!-- Created Quizzes Card -->
        <div class="card quiz-card">
            <h2>My Created Quizzes</h2>
            <div class="quiz-list">
                @if (Model.CreatedQuizzes.Any())
                {
                    @foreach (var quiz in Model.CreatedQuizzes)
                    {
                        <div class="quiz-item">
                            <div class="quiz-item-info">
                                <h3>@quiz.Title</h3>
                                <p>Category: @quiz.CategoryId ‚Ä¢ Created: @quiz.CreatedAt.ToString("MMM dd, yyyy")</p>
                            </div>
                            <div class="quiz-item-actions">
                                <a class="btn-action" asp-action="TakeQuiz" asp-route-quizId="@quiz.Id">Details</a>
                                <a class="btn-action btn-edit" asp-action="EditQuiz" asp-route-id="@quiz.Id">Edit</a>
                                
                                <form asp-action="DeleteQuiz" method="post" style="display:inline;" 
                                onsubmit="return confirm('Are you sure you want to delete this quiz?');">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="quizId" value="@quiz.Id" />
                                <button type="submit" class="btn-action btn-delete">Delete</button>
                                </form>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p>You haven't created any quizzes yet.</p>
                }
            </div>
        </div>

        <!-- Taken Quizzes Card -->
        <div class="card quiz-card">
            <h2>My Taken Quizzes</h2>
            <div class="quiz-list">
                @for (int i = 0; i < 3; i++)
                {
                    <div class="quiz-item">
                        <div class="quiz-item-info">
                            <h3>Taken Quiz @(i + 1)</h3>
                            <p>Score: 85% ‚Ä¢ Date: @DateTime.Now.AddDays(-i).ToString("MMM dd, yyyy")</p>
                        </div>
                        <div class="quiz-item-actions">
                            <button class="btn-action" onclick="showTakenDetails(@i)">Details</button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<style>
.my-page-container {
    position: relative;
    z-index: 2;  /* Increased z-index to be above clouds */
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
    font-family: 'Baloo 2', cursive;
    min-height: calc(100vh - 180px); /* Subtract header + footer height */
}

.page-title {
    text-align: center;
    margin-bottom: 2rem;
}

.page-title h1 {
    font-family: 'Baloo 2', cursive; /* Changed from Baby to Baloo 2 */
    font-size: 3rem;
    color: #0F766E;
    margin: 0;
    font-weight: 800;
}

.card {
    position: relative;  /* Add position relative */
    z-index: 2;         /* Same z-index as container */
    background: white;
    border-radius: 16px;
    box-shadow: 0 4px 16px rgba(0,0,0,0.1);
    padding: 2rem;
    margin-bottom: 2rem;
}

.user-overview {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 2rem;
    padding: 2rem;
}

.user-info {
    display: flex;
    align-items: center;
    gap: 2rem;
}

.profile-image {
    width: 120px;
    height: 120px;
    border-radius: 50%;
    object-fit: cover;
    border: 4px solid #0F766E;
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
}

.user-details h2 {
    font-family: 'Baloo 2', cursive; /* Changed from Baby to Baloo 2 */
    color: #0F766E;
    margin: 0 0 0.5rem 0;
    font-size: 2rem;
    font-weight: 700;
}

.user-address, .user-since {
    color: #666;
    margin: 0.25rem 0;
}

.user-stats {
    display: flex;
    gap: 2rem;
}

.stat {
    text-align: center;
}

.stat-number {
    display: block;
    font-size: 2rem;
    font-weight: bold;
    color: #0F766E;
}

.stat-label {
    color: #666;
    font-size: 0.9rem;
}

.quiz-cards-container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;
}

.quiz-card h2 {
    font-family: 'Baloo 2', cursive; /* Changed from Baby to Baloo 2 */
    color: #0F766E;
    margin: 0 0 1.5rem 0;
    font-size: 1.5rem;
    font-weight: 700;
}

.quiz-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.quiz-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    background: #f8f9fa;
    border-radius: 8px;
}

.quiz-item-info h3 {
    margin: 0 0 0.25rem 0;
    font-size: 1.1rem;
    color: #333;
}

.quiz-item-info p {
    margin: 0;
    color: #666;
    font-size: 0.9rem;
}

.quiz-item-actions {
    display: flex;
    gap: 0.5rem;
}

.btn-action {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 6px;
    font-weight: 600;
    cursor: pointer;
    font-family: 'Baloo 2', cursive;
    transition: opacity 0.2s;
    background: #0F766E;
    color: white;
}

.btn-action:hover {
    opacity: 0.9;
}

.btn-edit {
    background: #2563eb;
}

.btn-delete {
    background: #dc2626;
}

@@media (max-width: 768px) {
    .user-overview {
        flex-direction: column;
        text-align: center;
    }

    .user-info {
        flex-direction: column;
    }

    .quiz-cards-container {
        grid-template-columns: 1fr;
    }

    .quiz-item {
        flex-direction: column;
        gap: 1rem;
        text-align: center;
    }

    .quiz-item-actions {
        justify-content: center;
    }
}
</style>

<script>
function showDetails(id) {
    alert('Show details for quiz ' + id);
}

function editQuiz(id) {
    alert('Edit quiz ' + id);
}

function deleteQuiz(id) {
    if(confirm('Are you sure you want to delete this quiz?')) {
        alert('Delete quiz ' + id);
    }
}

function showTakenDetails(id) {
    alert('Show details for taken quiz ' + id);
}
</script>